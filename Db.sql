/*Eliminar Vistas*/

DROP VIEW SESSION_START;

DROP VIEW PRODUCT_DETAIL;

DROP VIEW PRODUCT_LIST;

DROP VIEW GENRES_LIST_MANAGEMENT;

DROP VIEW BANKS_ENTITY_LIST_MANAGEMENT;

DROP VIEW DEPARTMENTS_MANAGEMENT;

DROP VIEW PURCHASINGS_STATUS_MANAGEMENT;

DROP VIEW TRANSACTIONS_LIST;

DROP VIEW PRODUCT_LIST_MANAGEMENT;

DROP VIEW PRODUCT_DATA_PU;

/*Eliminar Tablas*/

DROP TABLE USERS;

DROP TABLE PRODUCTS;

DROP TABLE PAYS;

DROP TABLE DIRECTIONS;

DROP TABLE TRANSACTIONS;

DROP TABLE BANKING_ENTITIES;

DROP TABLE TRANSACTIONPRODUCT;

DROP TABLE CARS;

DROP TABLE CARPRODUCT;

DROP TABLE ADMINISTRATORS;

DROP TABLE PURCHASING_STATUS;

DROP TABLE DEPARTMENTS;

DROP TABLE GENRES;

DROP TABLE NEWS;

/*Eliminar Secuencias*/

DROP SEQUENCE USERS_SEQ;

DROP SEQUENCE PRODUCTS_SEQ;

DROP SEQUENCE DIRECTIONS_SEQ;

DROP SEQUENCE PAYS_SEQ;

DROP SEQUENCE TRANSACTIONS_SEQ;

DROP SEQUENCE TRPR_SEQ;

DROP SEQUENCE CARS_SEQ;

DROP SEQUENCE CARPR_SEQ;

DROP SEQUENCE ADMINISTRATORS_SEQ;

DROP SEQUENCE GENRES_SEQ;

DROP SEQUENCE DEPARTMENTS_SEQ;

DROP SEQUENCE PURCHASING_STATUS_SEQ;

DROP SEQUENCE BANKING_ENTITIES_SEQ;

DROP SEQUENCE NEWS_SEQ;

/*Eliminar tablespaces*/

DROP TABLESPACE USER_DATA;

DROP TABLESPACE TRANSACTION_DATA;

DROP TABLESPACE PRODUCT_DATA;

DROP TABLESPACE CAR_DATA;

/*Crear Tablas*/

CREATE TABLE USERS (
    USER_ID          NUMBER NOT NULL,
    GENRE_ID         NUMBER NOT NULL,
    ACTIVE           NUMBER(1) NOT NULL,
    CODE             VARCHAR2(10) NOT NULL,
    NAME             VARCHAR2(30) NOT NULL,
    SURNAME          VARCHAR2(40) NOT NULL,
    BIRTHDATE        DATE NOT NULL,
    PHONE            NUMBER NOT NULL,
    EMAIL            VARCHAR2(30) NOT NULL,
    USER_PASSWORD    VARCHAR2(100) NOT NULL,
    IMAGE            VARCHAR2(100) NOT NULL,
    EARNINGS         NUMBER NOT NULL,
    HIGHER_USER_ID   NUMBER NULL,
    CREATED_AT       DATE NOT NULL,
    CONSTRAINT users_pk PRIMARY KEY (USER_ID),
    CONSTRAINT higher_fk FOREIGN KEY (HIGHER_USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT user_genre_fk FOREIGN KEY (GENRE_ID) REFERENCES GENRES (GENRE_ID)
);

CREATE TABLE PURCHASING_STATUS (
    PURCHASING_STATUS_ID          NUMBER NOT NULL,
    ACTIVE           NUMBER(1) NOT NULL,
    NAME             VARCHAR2(30) NOT NULL,
    CREATED_AT       DATE NOT NULL,
    CONSTRAINT status_pk PRIMARY KEY (PURCHASING_STATUS_ID)
);

CREATE TABLE DEPARTMENTS (
    DEPARTMENT_ID          NUMBER NOT NULL,
    ACTIVE           NUMBER(1) NOT NULL,
    NAME             VARCHAR2(30) NOT NULL,
    CREATED_AT       DATE NOT NULL,
    CONSTRAINT department_pk PRIMARY KEY (DEPARTMENT_ID)
);

CREATE TABLE BANKING_ENTITIES (
    BANKING_ENTITY_ID         NUMBER NOT NULL,
    ACTIVE           NUMBER(1) NOT NULL,
    NAME             VARCHAR2(30) NOT NULL,
    CREATED_AT       DATE NOT NULL,
    CONSTRAINT banking_entity_pk PRIMARY KEY (BANKING_ENTITY_ID)
);

CREATE TABLE GENRES (
    GENRE_ID          NUMBER NOT NULL,
    ACTIVE           NUMBER(1) NOT NULL,
    NAME             VARCHAR2(30) NOT NULL,
    CREATED_AT       DATE NOT NULL,
    CONSTRAINT genre_pk PRIMARY KEY (GENRE_ID)
);

CREATE TABLE PRODUCTS (
    PRODUCT_ID             NUMBER NOT NULL,
    USER_ID         NUMBER NULL,
    ACTIVE          NUMBER(1) NOT NULL,
    NAME            VARCHAR2(30) NOT NULL,
    PRICE           NUMBER NOT NULL,
    UNITS           NUMBER NOT NULL,
    CONTENT         VARCHAR2(10) NOT NULL,
    STOCK           NUMBER NOT NULL,
    DESCRIPTION     VARCHAR2(60) NOT NULL,
    IMAGE           VARCHAR2(100) NOT NULL,
    CREATED_AT      DATE NOT NULL,
    CONSTRAINT products_pk PRIMARY KEY (PRODUCT_ID),
    CONSTRAINT products_user_fk FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE PAYS (
    PAY_ID              NUMBER NOT NULL,
    USER_ID         NUMBER NOT NULL,
    BANKING_ENTITY_ID   NUMBER NOT NULL,
    ACTIVE          NUMBER(1) NOT NULL,
    NUMBER_ELECTION NUMBER NOT NULL,
    CREATED_AT      DATE NOT NULL,
    CONSTRAINT pays_pk PRIMARY KEY (PAY_ID),
    CONSTRAINT pays_user_fk FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT pays_be_fk FOREIGN KEY (BANKING_ENTITY_ID) REFERENCES BANKING_ENTITIES(BANKING_ENTITY_ID)
);

CREATE TABLE DIRECTIONS (
    DIRECTION_ID              NUMBER NOT NULL,
    USER_ID         NUMBER NOT NULL,
    DEPARTMENT_ID     NUMBER NOT NULL,
    ACTIVE          NUMBER(1) NOT NULL,
    CITY             VARCHAR2(30) NOT NULL,
    CARRER          VARCHAR2(15) NOT NULL,
    STREET          VARCHAR2(15) NOT NULL,
    POSTAL_CODE     NUMBER NOT NULL,
    DIRECTION        VARCHAR2(50) NOT NULL,
    CREATED_AT      DATE NOT NULL,
    CONSTRAINT directions_pk PRIMARY KEY (DIRECTION_ID),
    CONSTRAINT directions_user_fk FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT directions_department_fk FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
);

CREATE TABLE CARS (
    CAR_ID                NUMBER NOT NULL,
    USER_ID           NUMBER NOT NULL,
    ACTIVE          NUMBER(1) NOT NULL,
    CREATED_AT        DATE NOT NULL,
    CONSTRAINT cars_pk PRIMARY KEY (CAR_ID),
    CONSTRAINT c_user_fk FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);

CREATE TABLE ADMINISTRATORS (
    ADMINISTRATOR_ID                NUMBER NOT NULL,
    EMAIL           VARCHAR2(30) NOT NULL,
    ADMINISTRATOR_PASSWORD        VARCHAR2(20) NOT NULL,
    CREATED_AT        DATE NOT NULL,
    CONSTRAINT administrators_pk PRIMARY KEY (ADMINISTRATOR_ID)
);

CREATE TABLE CARPRODUCT (
    CP_ID                  NUMBER NOT NULL,
    CAR_ID           NUMBER NOT NULL,
    PRODUCT_ID           NUMBER NOT NULL,
    ACTIVE          NUMBER(1) NOT NULL,
    UNITS            NUMBER NOT NULL,
    PRICE            NUMBER NOT NULL,
    CREATED_AT        DATE NOT NULL,
    CONSTRAINT carproduct_pk PRIMARY KEY (CP_ID),
    CONSTRAINT cp_car_fk FOREIGN KEY (CAR_ID) REFERENCES CARS (CAR_ID),
    CONSTRAINT cp_product_fk FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID)
);

CREATE TABLE TRANSACTIONS (
    TRANSACTION_ID                NUMBER NOT NULL,
    NUMBER_BILL     NUMBER NOT NULL,
    BUYER_ID       NUMBER NOT NULL,
    DIRECTION_ID           NUMBER NOT NULL,
    PAY_ID           NUMBER NOT NULL,
    TOTAL             NUMBER NOT NULL,
    DATE_TIME  DATE NOT NULL,
    CREATED_AT      DATE NOT NULL,
    CONSTRAINT shops_pk PRIMARY KEY (TRANSACTION_ID),
    CONSTRAINT tr_buyer_fk FOREIGN KEY (BUYER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT tr_direction_fk FOREIGN KEY (DIRECTION_ID) REFERENCES PAYS (PAY_ID),
    CONSTRAINT tr_pay_fk FOREIGN KEY (PAY_ID) REFERENCES DIRECTIONS (DIRECTION_ID)
);

CREATE TABLE NEWS (
    NEWS_ID         NUMBER NOT NULL,
    ACTIVE           NUMBER(1) NOT NULL,
    TITLE             VARCHAR2(30) NOT NULL,
    CONTENT             VARCHAR2(50) NOT NULL,
    LINK            VARCHAR2(75) NOT NULL,
    IMAGE           VARCHAR2(100) NOT NULL,
    CREATED_AT       DATE NOT NULL,
    CONSTRAINT news_pk PRIMARY KEY (NEWS_ID)
);

CREATE TABLE TRANSACTIONPRODUCT (
    TP_ID                  NUMBER NOT NULL,
    TRANSACTION_ID      NUMBER NOT NULL,
    PRODUCT_ID       NUMBER NOT NULL,
    SELLER_ID        NUMBER NOT NULL,
    PURCHASING_STATUS_ID      NUMBER NOT NULL,
    UNITS            NUMBER NOT NULL,
    CREATED_AT      DATE NOT NULL,
    CONSTRAINT trpr_pk PRIMARY KEY ( TP_ID ),
    CONSTRAINT trpr_transaction_fk FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTIONS (TRANSACTION_ID),
    CONSTRAINT trpr_product_fk FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID),
    CONSTRAINT trpr_user_fk FOREIGN KEY (SELLER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT purchase_status_fk FOREIGN KEY (PURCHASING_STATUS_ID) REFERENCES PURCHASING_STATUS(PURCHASING_STATUS_ID)
);

/*Crear administrador*/

INSERT INTO administrators values (1, 'admin@gmail.com', '123', SYSDATE);

/*Crear table space*/

CREATE TABLESPACE USER_DATA 
DATAFILE 'C:\Users\eduar\Oracle\tb/userdata.dbf'
SIZE 500M 
AUTOEXTEND ON 
NEXT 50M 
MAXSIZE 2G;

CREATE TABLESPACE PRODUCT_DATA 
DATAFILE 'C:\Users\eduar\Oracle\tb/productdata.dbf'
SIZE 500M 
AUTOEXTEND ON 
NEXT 50M 
MAXSIZE 3G;

CREATE TABLESPACE TRANSACTION_DATA 
DATAFILE 'C:\Users\eduar\Oracle\tb/transactiondata.dbf'
SIZE 500M 
AUTOEXTEND ON 
NEXT 50M 
MAXSIZE 4G;

CREATE TABLESPACE CAR_DATA 
DATAFILE 'C:\Users\eduar\Oracle\tb/cardata.dbf'
SIZE 500M 
AUTOEXTEND ON 
NEXT 50M 
MAXSIZE 5G;

/*Mover las tablas a los tablespace*/

ALTER TABLE USERS MOVE TABLESPACE USER_DATA;
ALTER TABLE GENRES MOVE TABLESPACE USER_DATA;

ALTER TABLE USERS MOVE TABLESPACE PRODUCT_DATA;
ALTER TABLE PRODUCTS MOVE TABLESPACE PRODUCT_DATA;
ALTER TABLE GENRES MOVE TABLESPACE USER_DATA;

ALTER TABLE CARS MOVE TABLESPACE CAR_DATA;
ALTER TABLE CARPRODUCT MOVE TABLESPACE CAR_DATA;
ALTER TABLE USERS MOVE TABLESPACE CAR_DATA;
ALTER TABLE PRODUCTS MOVE TABLESPACE CAR_DATA;
ALTER TABLE GENRES MOVE TABLESPACE USER_DATA;

ALTER TABLE TRANSACTIONS MOVE TABLESPACE TRANSACTION_DATA;
ALTER TABLE TRANSACTIONPRODUCT MOVE TABLESPACE TRANSACTION_DATA;
ALTER TABLE USERS MOVE TABLESPACE TRANSACTION_DATA;
ALTER TABLE PRODUCTS MOVE TABLESPACE TRANSACTION_DATA;
ALTER TABLE DIRECTIONS MOVE TABLESPACE TRANSACTION_DATA;
ALTER TABLE PAYS MOVE TABLESPACE TRANSACTION_DATA;
ALTER TABLE DEPARTMENTS MOVE TABLESPACE TRANSACTION_DATA;
ALTER TABLE GENRES MOVE TABLESPACE USER_DATA;

/*Crear Secuencias*/

CREATE SEQUENCE USERS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE PRODUCTS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE PAYS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE DIRECTIONS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE TRANSACTIONS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE TRPR_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE CARS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE CARPR_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE ADMINISTRATORS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE GENRES_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE DEPARTMENTS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE PURCHASING_STATUS_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE BANKING_ENTITIES_SEQ
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE NEWS_SEQ
START WITH 1
INCREMENT BY 1;

/*Crear Triggers*/

CREATE OR REPLACE TRIGGER USERS_TRG
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.USER_ID IS NULL THEN
        SELECT EDUARDED.USERS_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER PRODUCTS_TRG
BEFORE INSERT ON PRODUCTS
FOR EACH ROW
BEGIN
    IF :NEW.PRODUCT_ID IS NULL THEN
        SELECT EDUARDED.PRODUCTS_SEQ.NEXTVAL INTO :NEW.PRODUCT_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER PAYS_TRG
BEFORE INSERT ON PAYS
FOR EACH ROW
BEGIN
    IF :NEW.PAY_ID IS NULL THEN
        SELECT EDUARDED.PAYS_SEQ.NEXTVAL INTO :NEW.PAY_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER DIRECTIONS_TRG
BEFORE INSERT ON DIRECTIONS
FOR EACH ROW
BEGIN
    IF :NEW.DIRECTION_ID IS NULL THEN
        SELECT EDUARDED.DIRECTIONS_SEQ.NEXTVAL INTO :NEW.DIRECTION_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER TRANSACTIONS_TRG
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    IF :NEW.TRANSACTION_ID IS NULL THEN
        SELECT EDUARDED.TRANSACTIONS_SEQ.NEXTVAL INTO :NEW.TRANSACTION_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER TRPR_TRG
BEFORE INSERT ON TRANSACTIONPRODUCT
FOR EACH ROW
BEGIN
    IF :NEW.TP_ID IS NULL THEN
        SELECT EDUARDED.TRPR_SEQ.NEXTVAL INTO :NEW.TP_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER CARS_TRG
BEFORE INSERT ON CARS
FOR EACH ROW
BEGIN
    IF :NEW.CAR_ID IS NULL THEN
        SELECT EDUARDED.CARS_SEQ.NEXTVAL INTO :NEW.CAR_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER CARPR_TRG
BEFORE INSERT ON CARPRODUCT
FOR EACH ROW
BEGIN
    IF :NEW.CP_ID IS NULL THEN
        SELECT EDUARDED.CARPR_SEQ.NEXTVAL INTO :NEW.CP_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER ADMINISTRATOR_TRG
BEFORE INSERT ON ADMINISTRATORS
FOR EACH ROW
BEGIN
    IF :NEW.ADMINISTRATOR_ID IS NULL THEN
        SELECT EDUARDED.ADMINISTRATORS_SEQ.NEXTVAL INTO :NEW.ADMINISTRATOR_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER DEPARTMENT_TRG
BEFORE INSERT ON DEPARTMENTS
FOR EACH ROW
BEGIN
    IF :NEW.DEPARTMENT_ID IS NULL THEN
        SELECT EDUARDED.DEPARTMENTS_SEQ.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER GENRE_TRG
BEFORE INSERT ON GENRES
FOR EACH ROW
BEGIN
    IF :NEW.GENRE_ID IS NULL THEN
        SELECT EDUARDED.GENRES_SEQ.NEXTVAL INTO :NEW.GENRE_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER PURCHASING_STATUS_TRG
BEFORE INSERT ON PURCHASING_STATUS
FOR EACH ROW
BEGIN
    IF :NEW.PURCHASING_STATUS_ID IS NULL THEN
        SELECT EDUARDED.PURCHASING_STATUS_SEQ.NEXTVAL INTO :NEW.PURCHASING_STATUS_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER BANKING_ENTITY_TRG
BEFORE INSERT ON BANKING_ENTITIES
FOR EACH ROW
BEGIN
    IF :NEW.BANKING_ENTITY_ID IS NULL THEN
        SELECT EDUARDED.BANKING_ENTITIES_SEQ.NEXTVAL INTO :NEW.BANKING_ENTITY_ID FROM DUAL;
    END IF;
END;

CREATE OR REPLACE TRIGGER NEW_TRG
BEFORE INSERT ON NEWS
FOR EACH ROW
BEGIN
    IF :NEW.NEWS_ID IS NULL THEN
        SELECT EDUARDED.NEWS_SEQ.NEXTVAL INTO :NEW.NEWS_ID FROM DUAL;
    END IF;
END;

/*Crear o Reemplazar Vistas*/

CREATE OR REPLACE VIEW SESSION_START AS
SELECT USER_ID, ACTIVE, CODE, NAME, SURNAME, PHONE, EMAIL, USER_PASSWORD, IMAGE, HIGHER_USER_ID
FROM users;

CREATE OR REPLACE VIEW PRODUCT_DETAIL AS
SELECT PRODUCT_ID, USER_ID, NAME, PRICE, UNITS, CONTENT, STOCK, DESCRIPTION, IMAGE
FROM products;

CREATE OR REPLACE VIEW PRODUCT_LIST AS
SELECT PRODUCT_ID, ACTIVE, NAME, PRICE, IMAGE
FROM products;

CREATE OR REPLACE VIEW GENRES_LIST_MANAGEMENT AS
SELECT GENRE_ID, ACTIVE, NAME
FROM genres;

CREATE OR REPLACE VIEW BANKS_ENTITY_LIST_MANAGEMENT AS
SELECT BANKING_ENTITY_ID, NAME
FROM BANKING_ENTITIES;

CREATE OR REPLACE VIEW DEPARTMENTS_MANAGEMENT AS
SELECT DEPARTMENT_ID, NAME
FROM departments;

CREATE OR REPLACE VIEW PURCHASINGS_STATUS_MANAGEMENT AS
SELECT PURCHASING_STATUS_ID, NAME
FROM PURCHASING_STATUS;

CREATE OR REPLACE VIEW TRANSACTIONS_LIST AS
SELECT TRANSACTION_ID, BUYER_ID, NUMBER_BILL, DATE_TIME
FROM transactions;

CREATE OR REPLACE VIEW PRODUCT_LIST_MANAGEMENT AS
SELECT PRODUCT_ID, ACTIVE, NAME, PRICE, UNITS, CONTENT, STOCK
FROM products;

CREATE OR REPLACE VIEW PRODUCT_DATA_PU AS
SELECT PRODUCT_ID, USER_ID, PRICE
FROM products;

/*Funciones*/